name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.2)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Onix ${{ steps.get_version.outputs.version }}
        body_path: RELEASE_NOTES_v1.2.3.md
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          dist/onix.exe
          dist/onix
          onix-source.tar.gz

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build Windows executable
      run: |
        python build_all.py
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: onix-windows-amd64
        path: dist/onix.exe

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build macOS executable
      run: |
        python build_all.py
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: onix-macos-amd64
        path: dist/onix

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build Linux executable
      run: |
        python build_all.py
    
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: onix-linux-amd64
        path: dist/onix

  build-source:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Create source archive
      run: |
        git archive --format=tar.gz --prefix=onix-${{ github.ref_name }}/ HEAD > onix-source.tar.gz
    
    - name: Upload source artifact
      uses: actions/upload-artifact@v4
      with:
        name: onix-source
        path: onix-source.tar.gz

  upload-assets:
    runs-on: ubuntu-latest
    needs: [create-release, build-windows, build-macos, build-linux, build-source]
    permissions:
      contents: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Upload assets to release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        files: |
          artifacts/onix-windows-amd64/onix.exe
          artifacts/onix-macos-amd64/onix
          artifacts/onix-linux-amd64/onix
          artifacts/onix-source/onix-source.tar.gz